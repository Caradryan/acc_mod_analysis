import numpy as np
import math
import matplotlib.pyplot as plt
from pygadgetreader import *
import matplotlib.cm as cm
import time

#Where are the snapshot located?
mfolder = '/home/kz/cnd/'

models = ['torgood_ang0/','trot_0_1/','trot_0_2/','trot_0_3/',\
          'torgood_ang15/','trot_15_1/','trot_15_2/','trot_15_3/',\
          'torgood_ang30/','trot_30_1/','trot_30_2/','trot_30_3/',\
          'torgood_ang45/','trot_45_1/','trot_45_2/','trot_45_3/',\
          'torgood_ang60/','trot_60_1/','trot_60_2/','trot_60_3/',\
          'torgood_ang75/','trot_75_1/','trot_75_2/','trot_75_3/',\
          'torgood_ang90/','trot_90_1/','trot_90_2/','trot_90_3/',\
          'torgood_ang105/','trot_105_1/','trot_105_2/','trot_105_3/',\
          'torgood_ang120/','trot_120_1/','trot_120_2/','trot_120_3/',\
          'torgood_ang135/','trot_135_1/','trot_135_2/','trot_135_3/',\
          'torgood_ang150/','trot_150_1/','trot_150_2/','trot_150_3/',\
          'torgood_ang165/','trot_165_1/','trot_165_2/','trot_165_3/',\
          'torgood_ang180/','trot_180_1/','trot_180_2/','trot_180_3/'\
          ]

#models = ['torgood_ang180/']
#Choose shapshots you wish to read
minsnap = 0
maxsnap = 101
dsnap = 1
skait_arr = np.arange(minsnap,maxsnap,dsnap,)

#Units
UnitLength_in_cm     =   3.086 * 10**18
UnitMass_in_g        =   1.989 * 10**33 * 5. *10**6
boxsize = 10
UnitVelocity_in_cm_per_s = (6.67*10**(-8) * UnitMass_in_g/UnitLength_in_cm)**(1/2);
UnitTime_in_s = UnitLength_in_cm / UnitVelocity_in_cm_per_s
UnitEnergy_in_cgs =  UnitMass_in_g * UnitLength_in_cm**2 / UnitTime_in_s**2
UnitDensity_in_cgs = UnitMass_in_g/UnitLength_in_cm**3
UnitColumnDensity_in_cgs = UnitMass_in_g/UnitLength_in_cm**2
M_s = 1.9891 * 10**33 #g
c = 3*10**10 #cm/s

dt = 0.7485
    #lumiosity generated by accreting 100 particles
E100 = 7.16e53 #erg


ngas_tot = []
gamma = ["000","015","030","045","060","075","090","105","120","135","150","165","180"]
sk = 0
#for each model

for mod in range(len(models)):
    mgas_list = []
    #for each snapshot
    print("current: ",str(models[mod])[:-1])
    for i in skait_arr:
        if i == 0:
            print("||", end = "", flush = True)
        if 90%9 == 0:
            print("=", end = "", flush = True)

        if i == skait_arr[-1]:
            print("|| done", end = "\n", flush = True)
        #We generate a path
        sn = 'snapshot_%03d'%i
        mdir = mfolder+ models[mod]
        gp = mdir+sn
        #print(gp)
        #read data from snapshots
        N = readheader(gp,'npartTotal')
        N = np.array(N)
        #mass of the back hole
        mbh = readsnap(gp, 'mass', 'bndry',suppress = 1)
        ngas = N[0]
        ngas_tot.append(ngas)
        mgas = readsnap(gp,'mass','gas',suppress = 1)
        if max(mgas) < 10**(-10):
            mgas = mgas*10**10

        mgas_list.append(sum(mgas))
    #calculate accreted mass on each time interval
    mdif = np.abs(np.diff(np.array(mgas_list), 1))*UnitMass_in_g#/(0.7485*UnitTime_in_s)*UnitMass_in_g
    dm_dt = mdif / dt / UnitTime_in_s   #g/s

    #Disks and Eddington luminosities
    Ld = 0.1 * dm_dt * c**2 #erg/s
    Le = 1.3*10**38*(mbh*UnitMass_in_g/M_s) #erg/s
    Etot = [] #erg/s
    mtot = [] #g
    time_list = [] #s
    for i in range(len(Ld)):
        Etot.append(np.trapz(Ld[:i+1],dx=dt*UnitTime_in_s))
        Etot[0] = 0
        mtot.append(np.trapz(dm_dt[:i+1],dx=dt*UnitTime_in_s))
        mtot[0] = 0
        time_list.append(dt*i*UnitTime_in_s)
    Ld = np.array(Ld)
    Etot = np.array(Etot)
    dm_dt = np.array(dm_dt)
    time_list = np.array(time_list)
    mtot = np.array(mtot)

    fulldata=np.zeros([6,len(Ld)])
    fulldata[0,:] = time_list
    fulldata[1,:] = mtot
    fulldata[2,:] = dm_dt
    fulldata[3,:] = Etot
    fulldata[4,:] = Ld
    fulldata[5,:] = Ld/Le
    np.save("/home/s_matas/Analizes_programos/acc_duomenys_100/acc_data_" + str(models[mod])[:-1], fulldata)
    #np.savetxt("/home/s_matas/AnalizÄ—s_programos/acc_duomenys/acc_data_trot_" + gamma,fulldata )
    #plt.plot(Ld/Le)
    #plt.show()

    # saving Ld to txt for later plotting




#


#def dt2t(time_plot):
#    return time_plot*8100/1000000
#def cov_ax_dt2t(ax_dt):
#    x1, x2 = ax_dt.get_xlim()
#    ax_t.set_xlim(dt2t(x1), dt2t(x2))
#    ax_t.figure.canvas.draw()
#
#color_arr = ['k','gray','teal','red']
#fig,ax_dt = plt.subplots()
#fig.set_size_inches(5, 5)
#
#ax_t = ax_dt.twiny()
#ax_dt.plot(time_plot, np.convolve(np.array(Ld/Le), [1./16,4./16,6./16,4./16,1./16],mode ='same'),label ='$\gamma$ = '+ str(mnames[n_lines])+'$^{\circ}$',marker = ' ', color = color_arr[n_lines])
#ax_dt.set_ylim(-0.5, 1)
#ax_dt.legend(prop ={'size' :8})
#ax_dt.set_xlim(-0.05, (max(time_plot)))
#ax_dt.set_yscale('linear')
#ax_t.plot(range(1), range(1))
#ax_t.cla()
#
##legend.get_frame().set_facecolor('none')
##leg.get_frame().set_edgecolor('')
#ax_t.locator_params(axis='x', numticks=4)
#ax_t.locator_params(axis='y', numticks=4)
#ax_dt.locator_params(axis='y', numticks=5)
#ax_dt.locator_params(axis='x', numticks=4)
#ax_t.set_xticks(ax_dt.get_xticks()*8100/1000000)
#ax_t.set_xlim((-0.05*8100/1000000),(max(time_plot*8100/1000000)))
#ax_t.set_xlabel('$t$(Myr)',fontsize = 15)
#ax_dt.set_xlabel(r"$t/t_{d}$",fontsize = 15)
#ax_dt.set_ylabel(r'$f_{Edd}$',rotation=90, fontsize =15)
#plt.subplots_adjust(wspace = 0, hspace = 0,top = 0.8, bottom = 0.2, left = 0.2, right = 0.8)
##ax_dt.set_title('pasldasfasf'),
##ax_dt.grid()
#ax_t.tick_params(right = 'on',tickdir = 'in',top = 'on',labelsize = 10)
#ax_dt.tick_params(right = 'on',tickdir = 'in',top = 'on',labelsize = 10)
#ax_dt.set_ylim(0.00001,2.)
#ax_dt.set_yscale('log')
#locs = ax_t.get_xticks()
#ax_t.set_xticks(locs[2:-1])
#ax_t.legend(frameon='off')


